{"version":3,"sources":["webpack:///./node_modules/react-transition-group/esm/TransitionGroupContext.js","webpack:///./node_modules/react-transition-group/esm/utils/ChildMapping.js","webpack:///./node_modules/react-transition-group/esm/TransitionGroup.js","webpack:///./node_modules/react-transition-group/esm/config.js","webpack:///./node_modules/react-transition-group/esm/Transition.js"],"names":["createContext","getChildMapping","children","mapFn","result","Object","create","map","c","forEach","child","key","mapper","getProp","prop","props","getNextChildMapping","nextProps","prevChildMapping","onExited","nextChildMapping","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","length","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","keys","hasPrev","hasNext","prevChild","isLeaving","in","bind","exit","enter","values","obj","k","_React$Component","TransitionGroup","context","_this","handleExited","call","this","state","contextValue","isMounting","firstRender","_proto","prototype","componentDidMount","mounted","setState","componentWillUnmount","getDerivedStateFromProps","_ref","appear","node","currentChildMapping","render","_this$props","Component","component","childFactory","createElement","TransitionGroupContext","Provider","value","propTypes","defaultProps","Transition","initialStatus","appearStatus","unmountOnExit","mountOnEnter","status","nextCallback","prevState","updateStatus","componentDidUpdate","prevProps","nextStatus","cancelNextCallback","getTimeouts","timeout","undefined","mounting","findDOMNode","performEnter","performExit","_this2","appearing","timeouts","enterTimeout","config","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","childProps","Children","only","cloneElement","noop","contextType","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING"],"mappings":"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","file":"js/npm.react-transition-group.5e79691ffc0a6cf36351.js","sourcesContent":["import React from 'react';\nexport default React.createContext(null);","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = key in prevChildMapping;\n    var hasNext = key in nextChildMapping;\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n  /**\n   * The `<TransitionGroup>` component manages a set of transition components\n   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n   * components, `<TransitionGroup>` is a state machine for managing the mounting\n   * and unmounting of components over time.\n   *\n   * Consider the example below. As items are removed or added to the TodoList the\n   * `in` prop is toggled automatically by the `<TransitionGroup>`.\n   *\n   * Note that `<TransitionGroup>`  does not define any animation behavior!\n   * Exactly _how_ a list item animates is up to the individual transition\n   * component. This means you can mix and match animations across different list\n   * items.\n   */\n\n};\n\nvar TransitionGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  };\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","export default {\n  disabled: false\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  }; // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n      var node = ReactDOM.findDOMNode(this);\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(node, mounting);\n      } else {\n        this.performExit(node);\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(node, mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(node);\n      });\n      return;\n    }\n\n    this.props.onEnter(node, appearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(node, appearing);\n\n      _this2.onTransitionEnd(node, enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(node, appearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit(node) {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(node);\n      });\n      return;\n    }\n\n    this.props.onExit(node);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(node);\n\n      _this3.onTransitionEnd(node, timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(node);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n    this.setNextCallback(handler);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      this.props.addEndListener(node, this.nextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\"]); // filter props for Transtition\n\n\n    delete childProps.in;\n    delete childProps.mountOnEnter;\n    delete childProps.unmountOnExit;\n    delete childProps.appear;\n    delete childProps.enter;\n    delete childProps.exit;\n    delete childProps.timeout;\n    delete childProps.addEndListener;\n    delete childProps.onEnter;\n    delete childProps.onEntering;\n    delete childProps.onEntered;\n    delete childProps.onExit;\n    delete childProps.onExiting;\n    delete childProps.onExited;\n\n    if (typeof children === 'function') {\n      // allows for nested Transitions\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, children(status, childProps));\n    }\n\n    var child = React.Children.only(children);\n    return (// allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, React.cloneElement(child, childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * Normally a component is not transitioned if it is shown when the\n   * `<Transition>` component mounts. If you want to transition on the first\n   * mount set `appear` to `true`, and the component will transition in as soon\n   * as the `<Transition>` mounts.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func // Name the function so it is clearer in the documentation\n\n} : {};\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\nexport default Transition;"],"sourceRoot":""}